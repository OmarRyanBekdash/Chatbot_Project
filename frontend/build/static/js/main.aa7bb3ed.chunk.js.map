{"version":3,"sources":["logo.svg","Text.jsx","SubmitText.jsx","Authenticated.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Text","desc","className","genericAnswers","foodPreferences","sportsPreferences","schoolTopics","SubmitText","someText","useState","text","setText","textList","setTextList","createText","event","a","key","getRandomAnswer","randomAnswer","console","log","updatedTextList","undefined","map","index","type","placeholder","value","onChange","textDescrip","currentTarget","onKeyPress","onClick","target","checked","firebase","signOut","fetch","then","res","json","d","reply","r","randomAnswers","toLowerCase","indexOf","Math","floor","random","length","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","props","user","setUser","uiConfig","signInFlow","signInOptions","GoogleAuthProvider","PROVIDER_ID","useEffect","onAuthStateChanged","children","firebaseAuth","App","Authenticated","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aa7bb3ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nexport default function Text({ desc }) {\n  return (\n\n    <div className=\"textContainer\"> {desc} </div>\n  )\n}","import React, { useState } from 'react';\nimport Text from './Text';\nimport './SubmitText.css'\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\n\n\nconst genericAnswers = [\"I'm doing fine\", \"I'm alright\", \"Things are pretty crazy right now\", \"Hi!\", \"Well how are you?\", \"I kind of don't feel like talking right now\"]\nconst foodPreferences = [\"I like pizza\", \"Apple pie is an oldie but a goodie\", \"To be honest that's a hard one to answer!\"]\nconst sportsPreferences = [\"I have to say I love soccer\", \"Tom Brady is the absolute GOAT\", \"I like playing basketball, soccer, and American football\"]\nconst schoolTopics = [\"I can multiply any number in less than a millisecond\", \"I'm very smart\", \"I like to do math\", \"Algorithms is my favorite class\", \"The DTI web app course is pretty fire\"]\n\n\n\nexport default function SubmitText({ someText }) {\n  const [text, setText] = useState(\"\");\n\n  const [textList, setTextList] = useState([])\n  const changeText = (event) => {\n    const textDescrip = event.currentTarget.value;\n    setText(textDescrip);\n\n  }\n  const createText = async (event) => {\n    //helper function to get a computer response\n\n\n    if (event.key === \"Enter\") {\n      var randomAnswer = await getRandomAnswer(text);\n      console.log(\"random anser: \" + randomAnswer)\n      let updatedTextList = [...textList, text, randomAnswer]\n      console.log(updatedTextList)\n      setText(''); //CLEAR INPUT FIELD\n      setTextList(updatedTextList)\n      console.log(updatedTextList)\n    }\n    else if (event.key === undefined) {\n      var randomAnswer = await getRandomAnswer(text);\n      let updatedTextList = [...textList, text, randomAnswer]\n      setText(\"\"); //CLEAR INPUT FIELD\n      setTextList(updatedTextList)\n    }\n  }\n  const handleCheck = (event) => {\n    console.log(event.target);\n    console.log(event.target.checked)\n  }\n\n\n  return (\n    <div className=\"inputTextContainer\">\n      {\n        textList.map((desc, index) => (\n          <Text key={index} desc={desc} />\n        ))\n      }\n      <input\n        type=\"text\"\n        placeholder=\"Type a text\"\n        value={text}\n        onChange={changeText}\n        onKeyPress={createText}\n      />\n      <button onClick={createText}> Add Text</button>\n      <div>\n        <input\n          type=\"checkbox\"\n          value={text}\n          onChange={handleCheck}\n          onKeyPress={createText}\n        />\n      Check for bot to reply with your custom messages\n      <button onClick={() => firebase.auth().signOut()}> Sign Out </button>\n      </div>\n\n    </div>\n  );\n}\n\n\nasync function getRandomAnswer(text) {\n  //run firebase deploy in frontend folder\n  const r = await fetch('https://quiet-ridge-95758.herokuapp.com/getRandomResponse').then(res => res.json()).then(d => d.reply);\n  //console.log(r);\n  let randomAnswers = genericAnswers;\n  if (text === (\"\") || text.toLowerCase().indexOf(\" \") === 0) {\n    randomAnswers = [\"Im sorry it doesn't look like you said anything. Can you speak louder?\"];\n  }\n  else if (text.toLowerCase().indexOf(\"food\") > -1 ||\n    text.toLowerCase().indexOf(\"meal\") > -1 ||\n    text.toLowerCase().indexOf(\"snack\") > -1 ||\n    text.toLowerCase().indexOf(\"eat\") > -1) {\n    //\n    randomAnswers = foodPreferences;\n  } else if (text.toLowerCase().indexOf(\"football\") > -1 ||\n    text.toLowerCase().indexOf(\"soccer\") > -1 ||\n    text.toLowerCase().indexOf(\"basketball\") > -1 ||\n    text.toLowerCase().indexOf(\"sport\") > -1) {\n    //\n    randomAnswers = sportsPreferences;\n  }\n  else if (text.toLowerCase().indexOf(\"class\") > -1 ||\n    text.toLowerCase().indexOf(\"learn\") > -1 ||\n    text.toLowerCase().indexOf(\"school\") > -1 ||\n    text.toLowerCase().indexOf(\"cornell\") > -1) {\n    //\n    randomAnswers = schoolTopics;\n  }\n  let randomAnswer = randomAnswers[Math.floor(Math.random() * randomAnswers.length)];\n  console.log(\"this is waht r looks like \" + r);\n  return r;\n}\n\n\n\n\n// export default App;\n","import React, { useState, useEffect } from 'react';\nimport 'firebase/auth';\nimport * as firebase from 'firebase/app';\nimport FirebaseAuth from 'react-firebaseui/FirebaseAuth';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDGtCGt80rmkH6QlfDWnYl9mzhp44F2MlA\",\n  authDomain: \"dti-final-project-c7413.firebaseapp.com\",\n  databaseURL: \"https://dti-final-project-c7413.firebaseio.com\",\n  projectId: \"dti-final-project-c7413\",\n  storageBucket: \"dti-final-project-c7413.appspot.com\",\n  messagingSenderId: \"411724043939\",\n  appId: \"1:411724043939:web:24ba94d108b9613632d116\",\n  measurementId: \"G-J90PV45QJZ\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nexport default (props) => {\n  const [user, setUser] = useState(null);\n\n  const uiConfig = {\n    signInFlow: 'popup',\n    signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\n  };\n\n  function onAuthStateChange() {\n    return firebase.auth().onAuthStateChanged(user => {\n      setUser(user);\n    })\n  }\n\n  useEffect(() => onAuthStateChange(), []);\n  return (\n    <div>\n      {user && props.children}\n      {!user && (\n        <FirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n      )}\n    </div>\n  );\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Text from './Text.jsx';\nimport SubmitText from './SubmitText.jsx';\nimport Authenticated from './Authenticated.jsx';\n\nfunction App() {\n  return (\n    <div>\n      <Authenticated>\n        <SubmitText someText=\"RIP\" />\n      </Authenticated>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}